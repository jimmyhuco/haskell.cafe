---
title: Reading Notes About Yesod Book Part Two
tags: Haskell, Server, Yesod
---

The post below is some fragmentary reading notes while I'm reading "[[http://www.yesodweb.com/book][Yesod Web
Framework Book- Version 1.4]]". This is part two, [[http://haskell.cafe/posts/2017-08-05-reading-yesod-book.html][previous is part one]].

The book is a little outdated. I will note them out.

Instead of viewing an HTML document as a monolithic tree of tags, widgets see a
number of distinct components in the page. And every widget can insert:

- The title: only one
- External stylesheets: only be included once
- External Javascript: only be included once
- CSS declarations
- Javascript code
- Arbitrary src_html{<head>} content
- Arbitrary src_html{<body>} content

This can solve a problem: To add a component, but have to insert something into
src_html{<head>}, e.g. src_html{<style>}. When render other components first,
it's too late. Using widgets can merge all logics in compile time.

#+BEGIN_EXPORT html
<!--more-->
#+END_EXPORT

#+BEGIN_SRC haskell
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}
import           Yesod

data App = App
mkYesod "App" [parseRoutes|
/ HomeR GET
|]
instance Yesod App

getHomeR = defaultLayout $ do
    setTitle "My Page Title"
    toWidget [lucius| h1 { color: green; } |]
    addScriptRemote "https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"
    toWidget
        [julius|
            $(function() {
                $("h1").click(function(){
                    alert("You clicked on the heading!");
                });
            });
        |]
    toWidgetHead
        [hamlet|
            <meta name=keywords content="some sample keywords">
        |]
    toWidget
        [hamlet|
            <h1>Here's one way of including content
        |]
    [whamlet|<h2>Here's another |]
    toWidgetBody
        [julius|
            alert("This is included in the body itself");
        |]

main = warp 3000 App
#+END_SRC

Using =newIdent= to generate a ID, prevent from names conflict.

#+BEGIN_SRC haskell
getRootR = defaultLayout $ do
    headerClass <- newIdent
    toWidget [hamlet|<h1 .#{headerClass}>My Header|]
    toWidget [lucius| .#{headerClass} { color: green; } |]
#+END_SRC

Combining widgets just use src_haskell{widget1 >> widget2}

If you want to embed a widget, you have to use =whamlet=.

#+BEGIN_SRC haskell
footer = do
    toWidget
        [lucius|
            footer {
                font-weight: bold;
                text-align: center
            }
        |]
    toWidget
        [hamlet|
            <footer>
                <p>That's all folks!
        |]

page =
    [whamlet|
        <p>This is my page. I hope you enjoyed it.
        ^{footer}
    |]
#+END_SRC

In fact, Widget is a monad transformer: src_haskell{data WidgetT site m a}. If
you foundation data type is called HelloWorld, then your widget is
src_haskell{type Widget = WidgetT HelloWorld IO GHC.Tuple.()}.

And =defaultLayout= is actually a typeclass method. 

Overriding is very straight-forward: we use widgetToPageContent to convert a
Widget to a title, head tags and body tags, and then use withUrlRenderer to
convert a Hamlet template into an Html value. We can even add extra widget
components, like a Lucius template, from within defaultLayout.

#+BEGIN_SRC haskell
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}
import           Yesod

data App = App
mkYesod "App" [parseRoutes|
/ HomeR GET
|]

myLayout :: Widget -> Handler Html
myLayout widget = do
    pc <- widgetToPageContent $ do
        widget
        toWidget [lucius| body { font-family: verdana } |]
    withUrlRenderer
        [hamlet|
            $doctype 5
            <html>
                <head>
                    <title>#{pageTitle pc}
                    <meta charset=utf-8>
                    ^{pageHead pc}
                <body>
                    <article>
                        ^{pageBody pc}
        |]

instance Yesod App where
    defaultLayout = myLayout

getHomeR :: Handler Html
getHomeR = defaultLayout
    [whamlet|
        <p>Hello World!
    |]

main :: IO ()
main = warp 3000 App
#+END_SRC

If you are using the scaffolded site, you can modify the files
=templates/default-layout.hamlet= and =templates/default-layout-wrapper.hamlet=.
default-layout-wrapper is like =myLayout= and default-layout is the =pc=.

I will try widgets in real stuff later. Only by using, I can understand the good
and limit of widgets.

*Obviously, scaffolded site use =ApprootRequest= rather than =ApprootMaster=. The book(1.4) is outdated.*

#+BEGIN_SRC haskell
instance Yesod App where
    -- Controls the base of generated URLs. For more information on modifying,
    -- see: https://github.com/yesodweb/yesod/wiki/Overriding-approot
    approot = ApprootRequest $ \app req ->
        case appRoot $ appSettings app of
            Nothing -> getApprootText guessApproot app req
            Just root -> root
#+END_SRC

Yesod use [[https://github.com/sol/hpack#readme][hpack]] to manage Haskell packages. You shouldn't edit .cabal file while
using hpack. The Yesod scaffolding uses stack with hpack. hpack generates your
.cabal file by reading the package.yaml file. Add your package to the
dependencies section in the package.yaml file, it then gets added to .cabal file
during build.

In order to convert a type-safe URL into a text value, Yesod uses two helper
functions. The first is the =renderRoute= method of the =RenderRoute= typeclass.
But if you want to do some custom, you can use =joinPath=.

The flip side of =joinPath= is =cleanPath=.

When you reqest a url like src_shell{curl http://localhost:3000/foo}, you will get =Redirecting=. 

The whole flow is: src_haskell{Your reqest /foo -> cleanPath -> Left case: 301 -> joinPath -> /foo/}

#+BEGIN_SRC haskell
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Blaze.ByteString.Builder.Char.Utf8 (fromText)
import           Control.Arrow                      ((***))
import           Data.Monoid                        (mappend)
import qualified Data.Text                          as T
import qualified Data.Text.Encoding                 as TE
import           Network.HTTP.Types                 (encodePath)
import           Yesod

data Slash = Slash

mkYesod "Slash" [parseRoutes|
/ RootR GET
/foo FooR GET
|]

instance Yesod Slash where
    joinPath _ ar pieces' qs' =
        fromText ar `mappend` encodePath pieces qs
      where
        qs = map (TE.encodeUtf8 *** go) qs'
        go "" = Nothing
        go x = Just $ TE.encodeUtf8 x
        pieces = pieces' ++ [""]

    -- We want to keep canonical URLs. Therefore, if the URL is missing a
    -- trailing slash, redirect. But the empty set of pieces always stays the
    -- same.
    cleanPath _ [] = Right []
    cleanPath _ s
        | dropWhile (not . T.null) s == [""] = -- the only empty string is the last one
            Right $ init s
        -- Since joinPath will append the missing trailing slash, we simply
        -- remove empty pieces.
        | otherwise = Left $ filter (not . T.null) s

getRootR :: Handler Html
getRootR = defaultLayout
    [whamlet|
        <p>
            <a href=@{RootR}>RootR
        <p>
            <a href=@{FooR}>FooR
    |]

getFooR :: Handler Html
getFooR = getRootR

main :: IO ()
main = warp 3000 Slash
#+END_SRC

=setMessage= can write message in session. =getMessage= can read and clean the
message in session. For example:

#+BEGIN_SRC haskell
instance Yesod App where
    defaultLayout contents = do
        PageContent title headTags bodyTags <- widgetToPageContent contents
        mmsg <- getMessage
        withUrlRenderer [hamlet|
            $doctype 5

            <html>
                <head>
                    <title>#{title}
                    ^{headTags}
                <body>
                    $maybe msg <- mmsg
                        <div #message>#{msg}
                    ^{bodyTags}
        |]

getHomeR :: Handler Html
getHomeR = do
    now <- liftIO getCurrentTime
    setMessage $ toHtml $ "You previously visited at: " ++ show now
    defaultLayout [whamlet|<p>Try refreshing|]
#+END_SRC

Error page, just define instance method of Yesod your foundation data type.

#+BEGIN_SRC haskell
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
import           Yesod

data App = App

mkYesod "App" [parseRoutes|
/ HomeR GET
/error ErrorR GET
/not-found NotFoundR GET
|]

instance Yesod App where
    errorHandler NotFound = fmap toTypedContent $ defaultLayout $ do
        setTitle "Request page not located"
        toWidget [hamlet|
<h1>Not Found
<p>We apologize for the inconvenience, but the requested page could not be located.
|]
    errorHandler other = defaultErrorHandler other

getHomeR :: Handler Html
getHomeR = defaultLayout
    [whamlet|
        <p>
            <a href=@{ErrorR}>Internal server error
            <a href=@{NotFoundR}>Not found
    |]

getErrorR :: Handler ()
getErrorR = error "This is an error"

getNotFoundR :: Handler ()
getNotFoundR = notFound

main :: IO ()
main = warp 3000 App
#+END_SRC

=addStaticContent= method for smart add js css.

#+BEGIN_SRC haskell
    -- This function creates static content files in the static folder
    -- and names them based on a hash of their content. This allows
    -- expiration dates to be set far in the future without worry of
    -- users receiving stale content.
    addStaticContent ext mime content = do
        master <- getYesod
        let staticDir = appStaticDir $ appSettings master
        addStaticContentExternal
            minifym
            genFileName
            staticDir
            (StaticR . flip StaticRoute [])
            ext
            mime
            content
      where
        -- Generate a unique filename based on the content itself
        genFileName lbs = "autogen-" ++ base64md5 lbs
#+END_SRC

I search =urlRenderOverride=, but I can not find it. According to [[https://www.stackage.org/haddock/lts-9.0/yesod-core-1.4.35.1/Yesod-Core.html#t:Yesod][typeclass
definition in haddock]], urlRenderOverride is deprecated. 

Use src_haskell{urlParamRenderOverride :: site -> Route site -> [(Text, Text)] -> Maybe Builder} instead.

Define authorization of route.

#+BEGIN_SRC haskell
-- Routes not requiring authentication.
isAuthorized (AuthR _) _ = return Authorized
isAuthorized CommentR _ = return Authorized
isAuthorized HomeR _ = return Authorized
isAuthorized FaviconR _ = return Authorized
isAuthorized RobotsR _ = return Authorized
isAuthorized (StaticR _) _ = return Authorized

isAuthorized ProfileR _ = isAuthenticated
#+END_SRC

By default, it returns Authorized for all requests.

Check the [[https://www.stackage.org/haddock/lts-9.0/yesod-core-1.4.35.1/Yesod-Core.html#t:Yesod][Yesod]] typeclass methods to know default configurations.

=joinPath=, =addStaticContent=, =cleanPath= and so on are all in the list.
